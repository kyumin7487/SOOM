@use 'variables' as *;

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint) - 1px) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  @include flex-column;
  align-items: center;
  justify-content: center;
}

// Button mixins
@mixin button-base {
  @include flex-center;
  padding: map-get($spacing, 3) map-get($spacing, 6);
  border: none;
  border-radius: var(--border-radius-small);
  font-weight: map-get($font-weights, medium);
  font-size: map-get($font-sizes, base);
  cursor: pointer;
  transition: map-get($transitions, normal);
  text-decoration: none;
  gap: map-get($spacing, 2);

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-primary {
  @include button-base;
  background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
  color: white;
  box-shadow: var(--shadow);

  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: var(--shadow-hover);
  }

  &:active:not(:disabled) {
    transform: translateY(0);
  }
}

@mixin button-secondary {
  @include button-base;
  background: var(--card-background);
  color: var(--text-primary);
  border: 2px solid var(--border-color);

  &:hover:not(:disabled) {
    border-color: var(--primary-color);
    color: var(--primary-color);
  }
}

@mixin button-large {
  padding: map-get($spacing, 4) map-get($spacing, 8);
  font-size: map-get($font-sizes, lg);
  border-radius: var(--border-radius);
}

@mixin button-icon($size: 40px) {
  @include flex-center;
  width: $size;
  height: $size;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  transition: map-get($transitions, normal);

  svg {
    width: $size * 0.5;
    height: $size * 0.5;
  }
}

// Card mixins
@mixin card-base {
  background: var(--card-background);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  border: 1px solid var(--border-color);
  transition: map-get($transitions, normal);
}

@mixin card-hover {
  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-hover);
  }
}

@mixin card-interactive {
  @include card-base;
  @include card-hover;
  cursor: pointer;
}

// Typography mixins
@mixin text($size: base, $weight: normal, $color: var(--text-primary)) {
  font-size: map-get($font-sizes, $size);
  font-weight: map-get($font-weights, $weight);
  color: $color;
}

@mixin heading($size: 2xl, $weight: semibold) {
  @include text($size, $weight, var(--text-primary));
  line-height: 1.2;
  margin: 0;
}

@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Layout mixins
@mixin container($max-width: 1200px) {
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 map-get($spacing, 5);

  @include respond-below(md) {
    padding: 0 map-get($spacing, 4);
  }
}

@mixin grid($columns: auto-fit, $min-width: 250px, $gap: 24px) {
  display: grid;
  grid-template-columns: repeat($columns, minmax($min-width, 1fr));
  gap: $gap;

  @include respond-below(md) {
    gap: map-get($spacing, 4);
    grid-template-columns: 1fr;
  }
}

// Animation mixins
@mixin fade-in($duration: 0.5s, $delay: 0s) {
  animation: fadeIn $duration ease-out $delay both;
}

@mixin slide-up($duration: 0.3s, $delay: 0s) {
  animation: slideUp $duration ease-out $delay both;
}

@mixin pulse($color: var(--primary-color), $duration: 0.6s) {
  animation: pulse-#{unique-id()} $duration ease-out;

  @keyframes pulse-#{unique-id()} {
    0% {
      transform: scale(0.8);
      opacity: 0;
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
}

// Form mixins
@mixin input-base {
  padding: map-get($spacing, 3) map-get($spacing, 4);
  border: 2px solid var(--border-color);
  border-radius: var(--border-radius-small);
  font-size: map-get($font-sizes, base);
  transition: border-color map-get($transitions, normal);

  &:focus {
    outline: none;
    border-color: var(--primary-color);
  }

  &::placeholder {
    color: var(--text-secondary);
  }
}

@mixin form-group {
  @include flex-column;
  gap: map-get($spacing, 2);
}

// Utility mixins
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin overlay($z-index: map-get($z-index, modal-backdrop)) {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: $z-index;
  @include flex-center;
}

@mixin scrollbar-custom {
  &::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }

  &::-webkit-scrollbar-track {
    background: var(--border-color);
    border-radius: 3px;
  }

  &::-webkit-scrollbar-thumb {
    background: var(--primary-color);
    border-radius: 3px;

    &:hover {
      background: var(--primary-dark);
    }
  }
}

// Loading states
@mixin loading-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;

  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
}

@mixin spinner($size: 20px, $color: var(--primary-color)) {
  width: $size;
  height: $size;
  border: 2px solid transparent;
  border-top: 2px solid $color;
  border-radius: 50%;
  animation: spin 1s linear infinite;

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
}
